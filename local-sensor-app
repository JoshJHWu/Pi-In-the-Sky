require 'serialport'
require 'httparty'
require 'json'

sp = SerialPort.new "/dev/ttyUSB0", 9600
user_id = 1
url = "http://pi-in-the-sky.herokuapp.com/local_data_objects"
local_url = "http://10.0.0.61:3000/local_data_objects"
carl_local_url = "http://10.0.2.54:3000/local_data_objects"


while(true) do
co2 = sp.read
HTTParty.post(url,
    :body => { :user_id => user_id,
               :sensor_output => co2, 
             }.to_json,
    :headers => { 'Content-Type' => 'application/json' } )
	puts co2
	sleep 1
end


## arduino code from https://github.com/empierre/arduino/blob/master/AirQuality-MQ135.ino

# #include <SPI.h>
# #include <Wire.h> 
# #include <MySensor.h>  

# #define CHILD_ID_AIQ 0
# #define AIQ_SENSOR_ANALOG_PIN 0

# #define MQ135_DEFAULTPPM 399 //default ppm of CO2 for calibration
# #define MQ135_DEFAULTRO 68550 //default Ro for MQ135_DEFAULTPPM ppm of CO2
# #define MQ135_SCALINGFACTOR 116.6020682 //CO2 gas value
# #define MQ135_EXPONENT -2.769034857 //CO2 gas value
# #define MQ135_MAXRSRO 2.428 //for CO2
# #define MQ135_MINRSRO 0.358 //for CO2

# unsigned long SLEEP_TIME = 30000; // Sleep time between reads (in seconds)
# //VARIABLES
# float mq135_ro = 10000.0;    // this has to be tuned 10K Ohm
# int val = 0;                 // variable to store the value coming from the sensor
# float valAIQ =0.0;
# float lastAIQ =0.0;

# MySensor gw;
# MyMessage msg(CHILD_ID_AIQ, V_LEVEL);

# void setup()  
# {
#    Serial.begin(9600);    
# }

# /*
#  * get the calibrated ro based upon read resistance, and a know ppm
#  */
# long mq135_getro(long resvalue, double ppm) {
# return (long)(resvalue * exp( log(MQ135_SCALINGFACTOR/ppm) / MQ135_EXPONENT ));
# }

# /*
#  * get the ppm concentration
#  */
# double mq135_getppm(long resvalue, long ro) {
# double ret = 0;
# double validinterval = 0;
# validinterval = resvalue/(double)ro;
# if(validinterval<MQ135_MAXRSRO && validinterval>MQ135_MINRSRO) {
# ret = (double)MQ135_SCALINGFACTOR * pow( ((double)resvalue/ro), MQ135_EXPONENT);
# }
# return ret;
# }

# void loop()      
# { 
    
#   uint16_t valr = analogRead(AIQ_SENSOR_ANALOG_PIN);// Get AIQ value
#   Serial.println(val);
#   uint16_t val =  ((float)22000*(1023-valr)/valr); 
#   //during clean air calibration, read the Ro value and replace MQ135_DEFAULTRO value with it, you can even deactivate following function call.
#   mq135_ro = mq135_getro(val, MQ135_DEFAULTPPM);
#   //convert to ppm (using default ro)
#   valAIQ = mq135_getppm(val, MQ135_DEFAULTRO);

#   Serial.print ( "Val / Ro / value:");
#   Serial.print ( val);
#   Serial.print ( " / ");
#   Serial.print ( mq135_ro);
#   Serial.print ( " / ");
#   Serial.print ( valAIQ);

 
#   if (valAIQ != lastAIQ) {
#       lastAIQ = ceil(valAIQ);
#   }
 

#   delay(1000);
# }

 
# /*****************************  MQGetPercentage **********************************
# Input:   rs_ro_ratio - Rs divided by Ro
#          pcurve      - pointer to the curve of the target gas
# Output:  ppm of the target gas
# Remarks: By using the slope and a point of the line. The x(logarithmic value of ppm) 
#          of the line could be derived if y(rs_ro_ratio) is provided. As it is a 
#          logarithmic coordinate, power of 10 is used to convert the result to non-logarithmic 
#          value.
# ************************************************************************************/ 
# int  MQGetPercentage(float rs_ro_ratio, float ro, float *pcurve)
# {
#   return (double)(pcurve[0] * pow(((double)rs_ro_ratio/ro), pcurve[1]));
# }

